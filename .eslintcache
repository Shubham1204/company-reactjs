[{"F:\\Sanju_work\\React\\company\\src\\index.js":"1","F:\\Sanju_work\\React\\company\\src\\App.js":"2","F:\\Sanju_work\\React\\company\\src\\reportWebVitals.js":"3","F:\\Sanju_work\\React\\company\\src\\components\\auth\\Login.js":"4","F:\\Sanju_work\\React\\company\\src\\components\\pages\\Dashboard.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":409,"mtime":1609086620801,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":1621,"mtime":1609089094068,"results":"10","hashOfConfig":"7"},{"size":143,"mtime":1609086551579,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"g9zs12",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Sanju_work\\React\\company\\src\\index.js",[],["24","25"],"F:\\Sanju_work\\React\\company\\src\\App.js",[],"F:\\Sanju_work\\React\\company\\src\\reportWebVitals.js",[],"F:\\Sanju_work\\React\\company\\src\\components\\auth\\Login.js",["26","27","28"],"import React, { useState, useEffect } from 'react';\r\n// import db, { auth } from '../../firebase'\r\nimport axios from 'axios'\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nconst Login = (props) => {\r\n\r\n    // const [posts,setPost] = useState([]);\r\n  const [email,setEmail]= useState('');\r\n  const [password,setPassword]= useState('');\r\n\r\n  const onPasswordChange = (event) => setPassword(event.target.value);\r\n  const onEmailChange = (event) => setEmail(event.target.value);\r\n\r\n \r\n  const history = useHistory();\r\n\r\n  const onSubmit = () => {\r\n\r\n// var formJson = {\r\n//   'email': email,\r\n//     'password': password\r\n// };\r\n// const config = { headers: { 'Content-Type': 'multipart/form-data' } };\r\nconst formData = new FormData();\r\n    formData.append('email',email);\r\n    formData.append('password',password);\r\n  axios.post('http://projectsimplifiedcompany.atwebpages.com/login.php',formData)\r\n  .then(response =>{\r\n    console.log(\"my res-> \",response.data); \r\n   if(response.data[0].message==\"success\"){\r\n    // localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n     history.push('/main');\r\n   }else{\r\n    console.log(\"unable......\")\r\n   }\r\n\r\n  });\r\n  // var json = JSON.stringify({\r\n  //   email: email,\r\n  //   password: password \r\n  // });\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <input type=\"text\" name=\"email\" placeholder=\"email\" value={email} onChange={onEmailChange}></input>\r\n<input type=\"text\" name=\"password\" placeholder=\"Password\" value={password} onChange={onPasswordChange}></input>\r\n        <button onClick={onSubmit}>Submit</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","F:\\Sanju_work\\React\\company\\src\\components\\pages\\Dashboard.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":27,"nodeType":"35","messageId":"36","endLine":1,"endColumn":36},{"ruleId":"33","severity":1,"message":"37","line":4,"column":10,"nodeType":"35","messageId":"36","endLine":4,"endColumn":14},{"ruleId":"38","severity":1,"message":"39","line":31,"column":31,"nodeType":"40","messageId":"41","endLine":31,"endColumn":33},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]